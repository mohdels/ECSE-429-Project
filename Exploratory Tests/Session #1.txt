CHARTER
-------------------------------------------------------------
Identify capabilities and areas of potential instability of the “rest api todo list manager”.
Identify documented and undocumented “rest api todo list manager” capabilities.
For each capability create a script or small program to demonstrate the capability.
Exercise each capability identified with data typical to the intended use of the application.

Build
-----------------------------------------------
runTodoManagerRestAPI-1.5.5.jar

ENVIRONMENT
-------------------------------------------------------------
MacOS Sequoia 15.0

START
-------------------------------------------------------------
5:00 PM 23rd September 2024

TESTER
-------------------------------------------------------------
Mohammed Elsayed
mohammed.elsayed2@mail.mcgill.ca
261053266

DURATION:
-------------------------------------------------------------
45 minutes

SUMMARY OF SESSION FINDINGS:
-------------------------------------------------------------

- POST http://localhost:4567/todos correctly handled valid input. It correctly handled invalid input (missing title field, by raising an error and sending a 400 status. It also successfully created an instance of todo when a title field was provided

- GET http://localhost:4567/todos correctly returned all existing todo lists in the database.

- POST /todos/:id Posted the object with the existing id, while modifying the fields that were passed. It also handled invalid input correctly. The API also correctly raised an error and sent a 404 status when given an id with no associated todos.

- GET /todos/:id, when given an id with a todos associated to it, correctly returned the todos. It also correctly raised an error and sent a 404 status when given an id with no associated todos or a negative id.

- PUT /todos/:id, when given an id with a todos associated to it, correctly amended the fields of that todos when all fields were specified in the body of the call. However, there is a bug which makes it so that if there is a field which is not specified in the body, the PUT call will return that field to its default value instead of keeping it as it was previously. It also correctly handled the specified id either not having a todos associated to it or being a text by raising an error and sending a 404 status.

- DELETE /todos/:id correctly deletes the todos at the specified id when it exists. But no confirmation message is given

LIST OF CONCERNS
-------------------------------------------------------------
- App can be shutdown by anyone as it is a simple get request without any authentication or validation
- ID increases even though post fails (newly created ID will be 2 higher than previous object instead of 1). This may lead to data loss and loss of data integrity
- Certain HTTP methods not functioning as intended (PUT). This may also lead to data loss and loss of data integrity

LIST OF NEW TESTING IDEAS IDENTIFIED IN SESSION
-------------------------------------------------------------
- Test how the API handles the null keyword
- Test with IDs that are negative
- Will there be a race condition if two requests are sent at the exact same time?

FILES REFERENCED OR CREATED DURING THE SESSION
-------------------------------------------------------------
Session #1.txt

DETAILED STEPS
-------------------------------------------------------------
** Starting session

1) Start Application

2) GET /docs (get api documentation) works as expected

3) GET /todos (get all previously filled todos) works as expected

4) HEAD /todos (get headers for todos) works as expected

5) OPTIONS /todos (get all possible request methods for todos) works as expected

6) POST /todos (create todo instance without giving a title) gives an error message since no title (mandatory) is given; works as expected but (ID increments even though post did not work)
------------

7) GET /todos/1 (returns specific todo with given id) works as expected

8) POST /todos?title=test (creates a todo instance with “test” as the title) works as expected

9) POST /todos?title=test (creates a todo instance with “test” as the title) works as expected: created another instance of todo with title “test”, but with a different ID than the instance created in 8)

10) GET /todos?title=test (returns all todo instances with “test” as the title) works as expected

11) POST /todos?title=test1? Description=description test (adds a new instance of todo with “test1” as the title and “description test ” as the description) works as expected

12) GET /todos?description=description test&title=test1 (returns the instances of todo with “test1” as the title and “description test ” as the description) works as expected

10) HEAD /todos/1 (get header for specific todo) works as expected

11) OPTIONS /todos/1 (get all possible request methods for a single todo) works as expected

12) PUT /todos/3 (amend a pre-existing todo) when given an id with a todos associated to it, correctly amended the fields of that todos when all fields were specified in the body of the call. However, there is a bug which makes it so that if there is a field which is not specified in the body, the PUT call will return that field to its default value instead of keeping it as it was previously. The API did still correctly handle invalid input in the form of the fields "completed" and "active" being Strings instead of booleans by raising an error and sending a 400 status. It also correctly handled the specified id either not having a todos associated to it or being a text by raising an error and sending a 404 status.

13) POST /todos/3 (amend a pre-existing todo but using POST request) [same behaviour as PUT]

14) DELETE /todos/3 (delete a todo that exists) [successfully deleted but no confirmation message]
-------------

15) GET /todos/3/tasksof (get tasksof relationship for todo) works as expected

16) HEAD /todos/3/tasksof (get header for tasksof relationship) works as expected

17) POST /todos/1/tasksof (create a tasksof relationship with project id 1) [no confirmation message]

18) DELETE /todos/1/tasksof/1 (delete tasksof relationship) [no confirmation message]

19) GET /shutdown (shutting down application) works as expected

** Ending session

